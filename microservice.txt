Eureka server itself a microservice

https://javatechonline.com/how-to-register-discover-microservices-using-netflix-eureka/

service registry & 
discovery in the context of 
microservices

what is service Registry in Microservices?

service registry is the process 
of registering
a microservice with Eureka Server.

Eureka server is a center point

discovery--consuming the services

discovery

What is Service Discovery in Microservices?
Service Discovery is the process of discovering other microservices in the network to make intra-communication happen.
 However, a microservice first connects with Eureka to discover other microservice to make communicating with each other. 
Using Service Discovery, one microservice can connect with the other microservice via Eureka.



Microservice

1) Eureka server has to be created

     a) Single application with euruka server starter
     b) @EnableEurekaServer
     c)change application.properties

SERVER dont register server
Producer --> register in server
consumer ---> register in server

Consumer--- RestTemplate,Feign Client
Feign Client is better than RestTemplate



from BASIC==========


 1. Intro to webservices

 2. RESTful web service - 35 steps

 3. Microservices with Spring Cloud - 45 steps

 4.Spring boot in 10 steps

 5.JPA in 10 steps


 1. Intro to webservices======================

basic    a.http request methods
	 b. get post delete
         c.Exception Handling 
	 d.Validation
	 e.HATEOAS
         F.Http response status

ADVANCED: 
         A. VERSIONING
	 B.SWAGGER
	 C.FILTERING
	 D.MONITORING
	 E.CONTENT NEGOTIABLE
	 F.INTERNATIONALIZATION
INTRO TO WEBSERVICES=====================

WEB SERVICE: 

Softeware system designed to support 
Interoperable
Machine-to-Machine intraction (application - to application)
Over a network.


input to a webservice= == request

output from webservice === response

webservices should be plateform independent

request and response also platform independent


1) XML format
2) JSON --javascript Object Notation

how does application A how to send and where to send
and in which formate it should be sent??

Solution is SERVICE DEFINITION  -- SWAGGER

request/response format
request structure
response struncture
endpoint

=====

request, response, message exchange format
service provider and
service consumer

provider --  which hosts the webservice

consumer  -- who is using this service

Transport --- HTTP  or MQ

TWO TYPES OF WEBSERVICES===============

SOAP -- Simple Object Access Protocol

message converting format----> XML


similar to a letter model

Envelope .. header .... Body

header is optional.

SOAP:
SOAP XML Request
SOAP SML Response

Transport
SOAP over MQ
SOAP over HTTP

Service Definition    
WSDL  == Web Service Definition Language
----> Request Structure
    ----->Response Structure
    ----->EndPoints
    ------>All Operations
=============================
RESTFUL WEBSERVICES
===================
REpresentaional State Transfer

Making best use HTTP

HTTP methods: GET,POST,DELETE..
HTTP status code: 200,201,404,403,500

KEY abstraction
RESOURCE:
resource has an URI:(Uniform Resouce Identifier)

../user/Ranga/todos/1
../user/Ranga/todos

REST

Data exchange format -- no restriction 
but json is popular

Transport -- only HTTP

Service Definition ---> NO standard,
  WADL  Web Application Definition Language
  SWAGGER..
RESTFUL WEBSERVICES======================

basic    a.http request methods
	 b. get post delete
         c.Exception Handling 
	 d.Validation
	 e.HATEOAS
         F.Http response status

ADVANCED: 
         A. VERSIONING
	 B.SWAGGER
	 C.FILTERING
	 D.MONITORING
	 E.CONTENT NEGOTIABLE
	 F.INTERNATIONALIZATION
stEPS=============
Step 1. Creating a rest project
step 2. Understanding the REST services
    03. Creating HelloWorld RESTSERVice

2.step 2  ============= 

REST is a style of software architecture for 
distributed hypermedia systems

MAke best use of http

a)Methods     ---> get,put,post,delete
b)status code --->200,201,404,403,500

  MAIN note--> RESOURCE

Resource uri should be unique

Retreive all Users - GET 	 /users
Create a User      - POST	 /users
Retreive one User  - GEt 	 /users/{id} -- users/1
Delete a User      - DELETE  	 /users/{id} --/users/1

====Consider a social media application Ex FACEBOOK

-Retreive all posts for a User - GET  /users/{id}/posts
-Create a posts for a User     - POST /users/{id}posts
-Retreive details of a post    - GET  /users/{id}/posts/{post_id}

Some items has to be hided from the url 
or it has to be encripted.

======03.Creating HelloWorld RESTSERVice
package com.salambasha.rest.webservices.Helloword;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloWorldController {

	@GetMapping("/greetings")
//RequestMapping( method = RequestMethod.GET, path = "/greetings")
	public String sayGreetings() {
		
		return "Assalaamu alaikkum rahmathullaahi barakkaathuhu";
	}
	
}
========04.Enhancing the same application to return a bean.

NOTE:: If the required bean doesn't contain 
getters the we will get 500 error with the error 
message
NO Converter found for return value of type: ....HelloWorldBean

if there is no getters then there is no automatic conversion will happen.

	@GetMapping("/bean")
	//RequestMapping( method = RequestMethod.GET, path = "/greetings")
		public HelloWorldBean retrunHelloWorldBean() {
			
			return  new HelloWorldBean("Assalaamu alaikkum Rahmathullaahi barakkaathuhu");
		}
	


========05Quick Review of spring boot autoconfiguration

  What is dispatcher servlet?
  who is configuring dispatcher servlet?
  what does dispatcher servlet do?
  How does the HelloWorldBean object get converted to JSON?
  who is configuring the error mapping?

in application.properties

logging.level.org.springframework = debug  

AUTO - CONFIGURATION

contains all the details of classes which it 
autoconfigured like dispatcher servlet, error page
configuration, ex white lable error page,
HTTP messageconverter, object --- json
jacksontoobject mapper  json   -- object


dispatcher servlet to [/] root map

FrontController for spring web mvc framework

@RestControler  = @Controller + @ResponseBody

=======06.Enhancing with pathvariable 

	@GetMapping("/bean/path-variable/{name}")
	//RequestMapping( method = RequestMethod.GET, path = "/greetings")
		public HelloWorldBean HelloWorldWithPathVariable( @PathVariable String name) {
			
			return  new HelloWorldBean(String.format("Assalaamu alaikkum Rahmathullaahi barakkaathuhu , %s",name));
		}



========07.Creating User bean and User service

   There was an unexpected error (type=Internal Server Error, status=500).
Cannot invoke "com.salambasha.rest.webservices.services.UserDaoService.findAll()" because "this.service" is null
java.lang.NullPointerException: Cannot invoke "com.salambasha.rest.webservices.services.UserDaoService.findAll()" because "this.service" is null

this is becaus of missiong @Autowired.


========08.Creting Get Method for user resource
    



========09.implementing Post for creating a user




=========10. Created STatus code and location of newly created URI
@PostMapping("/users")
	public ResponseEntity<Object> createUser(@RequestBody User user) {
		
	User savedUser = 	service.save(user);
	URI location = ServletUriComponentsBuilder
	.fromCurrentRequest()
	.path("/{id}")
	.buildAndExpand(savedUser.getId()).toUri();
	
	return ResponseEntity.created(location).build();	
	}

==========11.Implementing Exception Handling and 404 not found

	@GetMapping("/users/{id}")
	public User findById(@PathVariable int id) {
		User user = service.findOne(id);
		
		if(user == null)
			throw new UserNotFoundException(" id - " + id + " not found");
		
		return user;
	}

===

package com.salambasha.rest.webservices.Exceptions;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.NOT_FOUND)
public class UserNotFoundException extends RuntimeException {

	public UserNotFoundException(String message) {
		super(message);
		// TODO Auto-generated constructor stub
	}

}

=======12.Implementing Generic Exception Handling for All Resources

UserNotFoundException class
CustomizingExceptionResponse class 
CudtomizedResponseEntityExceptionHandler

package com.salambasha.rest.webservices.Exceptions;

import java.util.Date;

public class CustomizingExceptionResponse {

	
	private Date timestamp;
	private String message;
	private String details;	
	
	public CustomizingExceptionResponse(Date timestamp, String message, String details) {
		super();
		this.timestamp = timestamp;
		this.message = message;
		this.details = details;
	}
	public Date getTimestamp() {
		return timestamp;
	}
	public String getMessage() {
		return message;
	}
	public String getDetails() {
		return details;
	}
	
=======

package com.salambasha.rest.webservices.Exceptions;

import java.util.Date;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

//Restcontroller at Exception
@ControllerAdvice // When we have multiple controller, this one is helps us to communicate between each other and
                            //handling the cross cutting concerns.
@RestController
public class CudtomizedResponseEntityExceptionHandler
extends ResponseEntityExceptionHandler {

	
	@ExceptionHandler(Exception.class)
	public final ResponseEntity<Object> handleAllException(Exception ex, WebRequest request) throws Exception {

		CustomizingExceptionResponse exceptionResponse = new CustomizingExceptionResponse(new Date(), ex.getMessage(), request.getDescription(false));
		
		 return new ResponseEntity(exceptionResponse, HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	
	@ExceptionHandler(UserNotFoundException.class)
	public final ResponseEntity<Object> handleUserNotFoundException(UserNotFoundException ex, WebRequest request) throws Exception {

		CustomizingExceptionResponse exceptionResponse = new CustomizingExceptionResponse(new Date(), ex.getMessage(), request.getDescription(false));
		
		 return new ResponseEntity(exceptionResponse, HttpStatus.NOT_FOUND);
	}
	
	
}


}
======Step 14 - Implementing DELETE Method to delete a User Resource
	@DeleteMapping("/users/{id}")
	public User deleteById(@PathVariable int id) {
		User user = service.deleteById(id);
		
		if(user == null)
			throw new UserNotFoundException(" id - " + id + " not found");
		
		return user;
	}

public User  deleteById(int id) {
		User user2 = null;
		// we cannot delete in between for loop
		Iterator<User> iterator = users.iterator();
		
		while(iterator.hasNext()) {
			
			User user = iterator.next();
			
			if(user.getId() == id) {
				iterator.remove();
				user2 = user;
				break;
			}
		}
		
		return user2;
		
	}
======Step 15 00 - Adding dependency for validation

added using starters


========16 implementing validation and handling
inside this class

public class CudtomizedResponseEntityExceptionHandler
extends ResponseEntityExceptionHandler

@Override
	protected ResponseEntity<Object> handleMethodArgumentNotValid(
			MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {

		CustomizingExceptionResponse exceptionResponse = new CustomizingExceptionResponse(new Date(), ex.getMessage(), ex.getBindingResult().toString());
		
		 return new ResponseEntity(exceptionResponse, HttpStatus.BAD_REQUEST);
	}


Check validator classes in which what are the 
validations that we can do

hibernate validator
and validator


=====16 HATEOS

HATEOS -- Hypermedia As The Engine 
	Of Application State --

Sending the api with api data and some usefull links.

How to add a simple link inside the response.

step1: add starter dependenccy

  spring-boot-starter-hateos

Step 2 Return EnityModel<User>

step2a:
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;

   resource + link ---> EntityModel has to be returned.

public EntityModel<User> retreiveUser(@PathVariable id){

User user = service.findOne(id);
if(user == null)
	throw new UserNotFoundException("id-" + id);
  
3) EntityModel<User> model = EntityModel.of(user);
4)
WebMvcLinkBuilder linkToUsers = linkTo(methodOn(this.getClass().retriveAllUSers());

5)model.add(linkToUsers.withRel("all-users"));

return model;

}

	
   














     
          
      





